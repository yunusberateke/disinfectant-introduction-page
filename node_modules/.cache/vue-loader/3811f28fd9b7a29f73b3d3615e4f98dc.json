{"remainingRequest":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eke/TanıtımSitesi/ilactanitim-web/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/src/views/Home.vue","mtime":1610968823917},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}