{"remainingRequest":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eke/TanıtımSitesi/ilactanitim-web/src/components/HelloWorld.vue?vue&type=template&id=469af010&","dependencies":[{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/src/components/HelloWorld.vue","mtime":1610967980209},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eke/TanıtımSitesi/ilactanitim-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}